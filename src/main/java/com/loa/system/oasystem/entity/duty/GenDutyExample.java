package com.loa.system.oasystem.entity.duty;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class GenDutyExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table duty
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table duty
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table duty
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public GenDutyExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public GenDutyExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public GenDutyExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GenDutyExample example = new GenDutyExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public GenDutyExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table duty
     *
     * @mbg.generated
     */
    public GenDutyExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table duty
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andDtidIsNull() {
            addCriterion("dtid is null");
            return (Criteria) this;
        }

        public Criteria andDtidIsNotNull() {
            addCriterion("dtid is not null");
            return (Criteria) this;
        }

        public Criteria andDtidEqualTo(Short value) {
            addCriterion("dtid =", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidNotEqualTo(Short value) {
            addCriterion("dtid <>", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidNotEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidGreaterThan(Short value) {
            addCriterion("dtid >", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidGreaterThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidGreaterThanOrEqualTo(Short value) {
            addCriterion("dtid >=", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidGreaterThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidLessThan(Short value) {
            addCriterion("dtid <", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidLessThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidLessThanOrEqualTo(Short value) {
            addCriterion("dtid <=", value, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidLessThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtidIn(List<Short> values) {
            addCriterion("dtid in", values, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidNotIn(List<Short> values) {
            addCriterion("dtid not in", values, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidBetween(Short value1, Short value2) {
            addCriterion("dtid between", value1, value2, "dtid");
            return (Criteria) this;
        }

        public Criteria andDtidNotBetween(Short value1, Short value2) {
            addCriterion("dtid not between", value1, value2, "dtid");
            return (Criteria) this;
        }

        public Criteria andEnameIsNull() {
            addCriterion("ename is null");
            return (Criteria) this;
        }

        public Criteria andEnameIsNotNull() {
            addCriterion("ename is not null");
            return (Criteria) this;
        }

        public Criteria andEnameEqualTo(String value) {
            addCriterion("ename =", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualTo(String value) {
            addCriterion("ename <>", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThan(String value) {
            addCriterion("ename >", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualTo(String value) {
            addCriterion("ename >=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThan(String value) {
            addCriterion("ename <", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualTo(String value) {
            addCriterion("ename <=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("ename <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLike(String value) {
            addCriterion("ename like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotLike(String value) {
            addCriterion("ename not like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameIn(List<String> values) {
            addCriterion("ename in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotIn(List<String> values) {
            addCriterion("ename not in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameBetween(String value1, String value2) {
            addCriterion("ename between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotBetween(String value1, String value2) {
            addCriterion("ename not between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andDtdateIsNull() {
            addCriterion("dtdate is null");
            return (Criteria) this;
        }

        public Criteria andDtdateIsNotNull() {
            addCriterion("dtdate is not null");
            return (Criteria) this;
        }

        public Criteria andDtdateEqualTo(LocalDateTime value) {
            addCriterion("dtdate =", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateNotEqualTo(LocalDateTime value) {
            addCriterion("dtdate <>", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateNotEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateGreaterThan(LocalDateTime value) {
            addCriterion("dtdate >", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateGreaterThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("dtdate >=", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateGreaterThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateLessThan(LocalDateTime value) {
            addCriterion("dtdate <", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateLessThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("dtdate <=", value, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateLessThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("dtdate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDtdateIn(List<LocalDateTime> values) {
            addCriterion("dtdate in", values, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateNotIn(List<LocalDateTime> values) {
            addCriterion("dtdate not in", values, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("dtdate between", value1, value2, "dtdate");
            return (Criteria) this;
        }

        public Criteria andDtdateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("dtdate not between", value1, value2, "dtdate");
            return (Criteria) this;
        }

        public Criteria andSignintimeIsNull() {
            addCriterion("signintime is null");
            return (Criteria) this;
        }

        public Criteria andSignintimeIsNotNull() {
            addCriterion("signintime is not null");
            return (Criteria) this;
        }

        public Criteria andSignintimeEqualTo(LocalDateTime value) {
            addCriterion("signintime =", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeNotEqualTo(LocalDateTime value) {
            addCriterion("signintime <>", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeNotEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeGreaterThan(LocalDateTime value) {
            addCriterion("signintime >", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeGreaterThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("signintime >=", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeGreaterThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeLessThan(LocalDateTime value) {
            addCriterion("signintime <", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeLessThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("signintime <=", value, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeLessThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signintime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignintimeIn(List<LocalDateTime> values) {
            addCriterion("signintime in", values, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeNotIn(List<LocalDateTime> values) {
            addCriterion("signintime not in", values, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("signintime between", value1, value2, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignintimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("signintime not between", value1, value2, "signintime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeIsNull() {
            addCriterion("signouttime is null");
            return (Criteria) this;
        }

        public Criteria andSignouttimeIsNotNull() {
            addCriterion("signouttime is not null");
            return (Criteria) this;
        }

        public Criteria andSignouttimeEqualTo(LocalDateTime value) {
            addCriterion("signouttime =", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeNotEqualTo(LocalDateTime value) {
            addCriterion("signouttime <>", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeNotEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeGreaterThan(LocalDateTime value) {
            addCriterion("signouttime >", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeGreaterThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("signouttime >=", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeGreaterThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeLessThan(LocalDateTime value) {
            addCriterion("signouttime <", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeLessThanColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("signouttime <=", value, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeLessThanOrEqualToColumn(GenDuty.Column column) {
            addCriterion(new StringBuilder("signouttime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSignouttimeIn(List<LocalDateTime> values) {
            addCriterion("signouttime in", values, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeNotIn(List<LocalDateTime> values) {
            addCriterion("signouttime not in", values, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("signouttime between", value1, value2, "signouttime");
            return (Criteria) this;
        }

        public Criteria andSignouttimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("signouttime not between", value1, value2, "signouttime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table duty
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table duty
         *
         * @mbg.generated
         */
        private GenDutyExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        protected Criteria(GenDutyExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        public GenDutyExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table duty
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table duty
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table duty
         *
         * @mbg.generated
         */
        void example(com.loa.system.oasystem.entity.duty.GenDutyExample example);
    }
}