package com.loa.system.oasystem.entity.expense;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class GenExpenseExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table expense
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table expense
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table expense
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public GenExpenseExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public GenExpenseExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public GenExpenseExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GenExpenseExample example = new GenExpenseExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public GenExpenseExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table expense
     *
     * @mbg.generated
     */
    public GenExpenseExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table expense
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andExpidIsNull() {
            addCriterion("expid is null");
            return (Criteria) this;
        }

        public Criteria andExpidIsNotNull() {
            addCriterion("expid is not null");
            return (Criteria) this;
        }

        public Criteria andExpidEqualTo(Short value) {
            addCriterion("expid =", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidNotEqualTo(Short value) {
            addCriterion("expid <>", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidGreaterThan(Short value) {
            addCriterion("expid >", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidGreaterThanOrEqualTo(Short value) {
            addCriterion("expid >=", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidLessThan(Short value) {
            addCriterion("expid <", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidLessThanOrEqualTo(Short value) {
            addCriterion("expid <=", value, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpidIn(List<Short> values) {
            addCriterion("expid in", values, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidNotIn(List<Short> values) {
            addCriterion("expid not in", values, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidBetween(Short value1, Short value2) {
            addCriterion("expid between", value1, value2, "expid");
            return (Criteria) this;
        }

        public Criteria andExpidNotBetween(Short value1, Short value2) {
            addCriterion("expid not between", value1, value2, "expid");
            return (Criteria) this;
        }

        public Criteria andEnameIsNull() {
            addCriterion("ename is null");
            return (Criteria) this;
        }

        public Criteria andEnameIsNotNull() {
            addCriterion("ename is not null");
            return (Criteria) this;
        }

        public Criteria andEnameEqualTo(String value) {
            addCriterion("ename =", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualTo(String value) {
            addCriterion("ename <>", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThan(String value) {
            addCriterion("ename >", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualTo(String value) {
            addCriterion("ename >=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThan(String value) {
            addCriterion("ename <", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualTo(String value) {
            addCriterion("ename <=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("ename <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLike(String value) {
            addCriterion("ename like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotLike(String value) {
            addCriterion("ename not like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameIn(List<String> values) {
            addCriterion("ename in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotIn(List<String> values) {
            addCriterion("ename not in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameBetween(String value1, String value2) {
            addCriterion("ename between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotBetween(String value1, String value2) {
            addCriterion("ename not between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andTotalamountIsNull() {
            addCriterion("totalamount is null");
            return (Criteria) this;
        }

        public Criteria andTotalamountIsNotNull() {
            addCriterion("totalamount is not null");
            return (Criteria) this;
        }

        public Criteria andTotalamountEqualTo(Double value) {
            addCriterion("totalamount =", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountNotEqualTo(Double value) {
            addCriterion("totalamount <>", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountGreaterThan(Double value) {
            addCriterion("totalamount >", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountGreaterThanOrEqualTo(Double value) {
            addCriterion("totalamount >=", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountLessThan(Double value) {
            addCriterion("totalamount <", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountLessThanOrEqualTo(Double value) {
            addCriterion("totalamount <=", value, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("totalamount <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalamountIn(List<Double> values) {
            addCriterion("totalamount in", values, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountNotIn(List<Double> values) {
            addCriterion("totalamount not in", values, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountBetween(Double value1, Double value2) {
            addCriterion("totalamount between", value1, value2, "totalamount");
            return (Criteria) this;
        }

        public Criteria andTotalamountNotBetween(Double value1, Double value2) {
            addCriterion("totalamount not between", value1, value2, "totalamount");
            return (Criteria) this;
        }

        public Criteria andExptimeIsNull() {
            addCriterion("exptime is null");
            return (Criteria) this;
        }

        public Criteria andExptimeIsNotNull() {
            addCriterion("exptime is not null");
            return (Criteria) this;
        }

        public Criteria andExptimeEqualTo(LocalDateTime value) {
            addCriterion("exptime =", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeNotEqualTo(LocalDateTime value) {
            addCriterion("exptime <>", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeGreaterThan(LocalDateTime value) {
            addCriterion("exptime >", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("exptime >=", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeLessThan(LocalDateTime value) {
            addCriterion("exptime <", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("exptime <=", value, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("exptime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExptimeIn(List<LocalDateTime> values) {
            addCriterion("exptime in", values, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeNotIn(List<LocalDateTime> values) {
            addCriterion("exptime not in", values, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exptime between", value1, value2, "exptime");
            return (Criteria) this;
        }

        public Criteria andExptimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exptime not between", value1, value2, "exptime");
            return (Criteria) this;
        }

        public Criteria andExpdescIsNull() {
            addCriterion("expdesc is null");
            return (Criteria) this;
        }

        public Criteria andExpdescIsNotNull() {
            addCriterion("expdesc is not null");
            return (Criteria) this;
        }

        public Criteria andExpdescEqualTo(String value) {
            addCriterion("expdesc =", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescNotEqualTo(String value) {
            addCriterion("expdesc <>", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescGreaterThan(String value) {
            addCriterion("expdesc >", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescGreaterThanOrEqualTo(String value) {
            addCriterion("expdesc >=", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescLessThan(String value) {
            addCriterion("expdesc <", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescLessThanOrEqualTo(String value) {
            addCriterion("expdesc <=", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("expdesc <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExpdescLike(String value) {
            addCriterion("expdesc like", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescNotLike(String value) {
            addCriterion("expdesc not like", value, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescIn(List<String> values) {
            addCriterion("expdesc in", values, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescNotIn(List<String> values) {
            addCriterion("expdesc not in", values, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescBetween(String value1, String value2) {
            addCriterion("expdesc between", value1, value2, "expdesc");
            return (Criteria) this;
        }

        public Criteria andExpdescNotBetween(String value1, String value2) {
            addCriterion("expdesc not between", value1, value2, "expdesc");
            return (Criteria) this;
        }

        public Criteria andNextauditorIsNull() {
            addCriterion("nextauditor is null");
            return (Criteria) this;
        }

        public Criteria andNextauditorIsNotNull() {
            addCriterion("nextauditor is not null");
            return (Criteria) this;
        }

        public Criteria andNextauditorEqualTo(String value) {
            addCriterion("nextauditor =", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorNotEqualTo(String value) {
            addCriterion("nextauditor <>", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorGreaterThan(String value) {
            addCriterion("nextauditor >", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorGreaterThanOrEqualTo(String value) {
            addCriterion("nextauditor >=", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorLessThan(String value) {
            addCriterion("nextauditor <", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorLessThanOrEqualTo(String value) {
            addCriterion("nextauditor <=", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("nextauditor <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNextauditorLike(String value) {
            addCriterion("nextauditor like", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorNotLike(String value) {
            addCriterion("nextauditor not like", value, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorIn(List<String> values) {
            addCriterion("nextauditor in", values, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorNotIn(List<String> values) {
            addCriterion("nextauditor not in", values, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorBetween(String value1, String value2) {
            addCriterion("nextauditor between", value1, value2, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andNextauditorNotBetween(String value1, String value2) {
            addCriterion("nextauditor not between", value1, value2, "nextauditor");
            return (Criteria) this;
        }

        public Criteria andLastresultIsNull() {
            addCriterion("lastResult is null");
            return (Criteria) this;
        }

        public Criteria andLastresultIsNotNull() {
            addCriterion("lastResult is not null");
            return (Criteria) this;
        }

        public Criteria andLastresultEqualTo(String value) {
            addCriterion("lastResult =", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultNotEqualTo(String value) {
            addCriterion("lastResult <>", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultGreaterThan(String value) {
            addCriterion("lastResult >", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultGreaterThanOrEqualTo(String value) {
            addCriterion("lastResult >=", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultLessThan(String value) {
            addCriterion("lastResult <", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultLessThanOrEqualTo(String value) {
            addCriterion("lastResult <=", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("lastResult <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastresultLike(String value) {
            addCriterion("lastResult like", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultNotLike(String value) {
            addCriterion("lastResult not like", value, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultIn(List<String> values) {
            addCriterion("lastResult in", values, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultNotIn(List<String> values) {
            addCriterion("lastResult not in", values, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultBetween(String value1, String value2) {
            addCriterion("lastResult between", value1, value2, "lastresult");
            return (Criteria) this;
        }

        public Criteria andLastresultNotBetween(String value1, String value2) {
            addCriterion("lastResult not between", value1, value2, "lastresult");
            return (Criteria) this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("`status` is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("`status` is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(String value) {
            addCriterion("`status` =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(String value) {
            addCriterion("`status` <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(String value) {
            addCriterion("`status` >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(String value) {
            addCriterion("`status` >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(String value) {
            addCriterion("`status` <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(String value) {
            addCriterion("`status` <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("`status` <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLike(String value) {
            addCriterion("`status` like", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotLike(String value) {
            addCriterion("`status` not like", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<String> values) {
            addCriterion("`status` in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<String> values) {
            addCriterion("`status` not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(String value1, String value2) {
            addCriterion("`status` between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(String value1, String value2) {
            addCriterion("`status` not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andDelIsNull() {
            addCriterion("del is null");
            return (Criteria) this;
        }

        public Criteria andDelIsNotNull() {
            addCriterion("del is not null");
            return (Criteria) this;
        }

        public Criteria andDelEqualTo(Short value) {
            addCriterion("del =", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelNotEqualTo(Short value) {
            addCriterion("del <>", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThan(Short value) {
            addCriterion("del >", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualTo(Short value) {
            addCriterion("del >=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThan(Short value) {
            addCriterion("del <", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualTo(Short value) {
            addCriterion("del <=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualToColumn(GenExpense.Column column) {
            addCriterion(new StringBuilder("del <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelIn(List<Short> values) {
            addCriterion("del in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotIn(List<Short> values) {
            addCriterion("del not in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelBetween(Short value1, Short value2) {
            addCriterion("del between", value1, value2, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotBetween(Short value1, Short value2) {
            addCriterion("del not between", value1, value2, "del");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table expense
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table expense
         *
         * @mbg.generated
         */
        private GenExpenseExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        protected Criteria(GenExpenseExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        public GenExpenseExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        public Criteria andLogicalDeleted(boolean deleted) {
            return deleted ? andDelEqualTo(GenExpense.Del.IS_DELETED.value()) : andDelNotEqualTo(GenExpense.Del.IS_DELETED.value());
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table expense
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table expense
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table expense
         *
         * @mbg.generated
         */
        void example(com.loa.system.oasystem.entity.expense.GenExpenseExample example);
    }
}