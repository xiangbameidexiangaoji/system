package com.loa.system.oasystem.entity.income;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class GenIncomeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table income
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table income
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table income
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public GenIncomeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public GenIncomeExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public GenIncomeExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GenIncomeExample example = new GenIncomeExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public GenIncomeExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table income
     *
     * @mbg.generated
     */
    public GenIncomeExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table income
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIcidIsNull() {
            addCriterion("icid is null");
            return (Criteria) this;
        }

        public Criteria andIcidIsNotNull() {
            addCriterion("icid is not null");
            return (Criteria) this;
        }

        public Criteria andIcidEqualTo(Short value) {
            addCriterion("icid =", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidNotEqualTo(Short value) {
            addCriterion("icid <>", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidGreaterThan(Short value) {
            addCriterion("icid >", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidGreaterThanOrEqualTo(Short value) {
            addCriterion("icid >=", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidLessThan(Short value) {
            addCriterion("icid <", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidLessThanOrEqualTo(Short value) {
            addCriterion("icid <=", value, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcidIn(List<Short> values) {
            addCriterion("icid in", values, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidNotIn(List<Short> values) {
            addCriterion("icid not in", values, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidBetween(Short value1, Short value2) {
            addCriterion("icid between", value1, value2, "icid");
            return (Criteria) this;
        }

        public Criteria andIcidNotBetween(Short value1, Short value2) {
            addCriterion("icid not between", value1, value2, "icid");
            return (Criteria) this;
        }

        public Criteria andAmountIsNull() {
            addCriterion("amount is null");
            return (Criteria) this;
        }

        public Criteria andAmountIsNotNull() {
            addCriterion("amount is not null");
            return (Criteria) this;
        }

        public Criteria andAmountEqualTo(Double value) {
            addCriterion("amount =", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountNotEqualTo(Double value) {
            addCriterion("amount <>", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThan(Double value) {
            addCriterion("amount >", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThanOrEqualTo(Double value) {
            addCriterion("amount >=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountLessThan(Double value) {
            addCriterion("amount <", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountLessThanOrEqualTo(Double value) {
            addCriterion("amount <=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("amount <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAmountIn(List<Double> values) {
            addCriterion("amount in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotIn(List<Double> values) {
            addCriterion("amount not in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountBetween(Double value1, Double value2) {
            addCriterion("amount between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotBetween(Double value1, Double value2) {
            addCriterion("amount not between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andIcdateIsNull() {
            addCriterion("icdate is null");
            return (Criteria) this;
        }

        public Criteria andIcdateIsNotNull() {
            addCriterion("icdate is not null");
            return (Criteria) this;
        }

        public Criteria andIcdateEqualTo(LocalDateTime value) {
            addCriterion("icdate =", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateNotEqualTo(LocalDateTime value) {
            addCriterion("icdate <>", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateGreaterThan(LocalDateTime value) {
            addCriterion("icdate >", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("icdate >=", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateLessThan(LocalDateTime value) {
            addCriterion("icdate <", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("icdate <=", value, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("icdate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIcdateIn(List<LocalDateTime> values) {
            addCriterion("icdate in", values, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateNotIn(List<LocalDateTime> values) {
            addCriterion("icdate not in", values, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("icdate between", value1, value2, "icdate");
            return (Criteria) this;
        }

        public Criteria andIcdateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("icdate not between", value1, value2, "icdate");
            return (Criteria) this;
        }

        public Criteria andIctypeIsNull() {
            addCriterion("ictype is null");
            return (Criteria) this;
        }

        public Criteria andIctypeIsNotNull() {
            addCriterion("ictype is not null");
            return (Criteria) this;
        }

        public Criteria andIctypeEqualTo(String value) {
            addCriterion("ictype =", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeNotEqualTo(String value) {
            addCriterion("ictype <>", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeGreaterThan(String value) {
            addCriterion("ictype >", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeGreaterThanOrEqualTo(String value) {
            addCriterion("ictype >=", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeLessThan(String value) {
            addCriterion("ictype <", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeLessThanOrEqualTo(String value) {
            addCriterion("ictype <=", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("ictype <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIctypeLike(String value) {
            addCriterion("ictype like", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeNotLike(String value) {
            addCriterion("ictype not like", value, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeIn(List<String> values) {
            addCriterion("ictype in", values, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeNotIn(List<String> values) {
            addCriterion("ictype not in", values, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeBetween(String value1, String value2) {
            addCriterion("ictype between", value1, value2, "ictype");
            return (Criteria) this;
        }

        public Criteria andIctypeNotBetween(String value1, String value2) {
            addCriterion("ictype not between", value1, value2, "ictype");
            return (Criteria) this;
        }

        public Criteria andIndescIsNull() {
            addCriterion("indesc is null");
            return (Criteria) this;
        }

        public Criteria andIndescIsNotNull() {
            addCriterion("indesc is not null");
            return (Criteria) this;
        }

        public Criteria andIndescEqualTo(String value) {
            addCriterion("indesc =", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescNotEqualTo(String value) {
            addCriterion("indesc <>", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescGreaterThan(String value) {
            addCriterion("indesc >", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescGreaterThanOrEqualTo(String value) {
            addCriterion("indesc >=", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescLessThan(String value) {
            addCriterion("indesc <", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescLessThanOrEqualTo(String value) {
            addCriterion("indesc <=", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("indesc <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIndescLike(String value) {
            addCriterion("indesc like", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescNotLike(String value) {
            addCriterion("indesc not like", value, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescIn(List<String> values) {
            addCriterion("indesc in", values, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescNotIn(List<String> values) {
            addCriterion("indesc not in", values, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescBetween(String value1, String value2) {
            addCriterion("indesc between", value1, value2, "indesc");
            return (Criteria) this;
        }

        public Criteria andIndescNotBetween(String value1, String value2) {
            addCriterion("indesc not between", value1, value2, "indesc");
            return (Criteria) this;
        }

        public Criteria andUseridIsNull() {
            addCriterion("userid is null");
            return (Criteria) this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("userid is not null");
            return (Criteria) this;
        }

        public Criteria andUseridEqualTo(String value) {
            addCriterion("userid =", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridNotEqualTo(String value) {
            addCriterion("userid <>", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThan(String value) {
            addCriterion("userid >", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(String value) {
            addCriterion("userid >=", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridLessThan(String value) {
            addCriterion("userid <", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridLessThanOrEqualTo(String value) {
            addCriterion("userid <=", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("userid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUseridLike(String value) {
            addCriterion("userid like", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridNotLike(String value) {
            addCriterion("userid not like", value, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridIn(List<String> values) {
            addCriterion("userid in", values, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridNotIn(List<String> values) {
            addCriterion("userid not in", values, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridBetween(String value1, String value2) {
            addCriterion("userid between", value1, value2, "userid");
            return (Criteria) this;
        }

        public Criteria andUseridNotBetween(String value1, String value2) {
            addCriterion("userid not between", value1, value2, "userid");
            return (Criteria) this;
        }

        public Criteria andDelIsNull() {
            addCriterion("del is null");
            return (Criteria) this;
        }

        public Criteria andDelIsNotNull() {
            addCriterion("del is not null");
            return (Criteria) this;
        }

        public Criteria andDelEqualTo(Short value) {
            addCriterion("del =", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelNotEqualTo(Short value) {
            addCriterion("del <>", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThan(Short value) {
            addCriterion("del >", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualTo(Short value) {
            addCriterion("del >=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThan(Short value) {
            addCriterion("del <", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualTo(Short value) {
            addCriterion("del <=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualToColumn(GenIncome.Column column) {
            addCriterion(new StringBuilder("del <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelIn(List<Short> values) {
            addCriterion("del in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotIn(List<Short> values) {
            addCriterion("del not in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelBetween(Short value1, Short value2) {
            addCriterion("del between", value1, value2, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotBetween(Short value1, Short value2) {
            addCriterion("del not between", value1, value2, "del");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table income
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table income
         *
         * @mbg.generated
         */
        private GenIncomeExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        protected Criteria(GenIncomeExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        public GenIncomeExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        public Criteria andLogicalDeleted(boolean deleted) {
            return deleted ? andDelEqualTo(GenIncome.Del.IS_DELETED.value()) : andDelNotEqualTo(GenIncome.Del.IS_DELETED.value());
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table income
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table income
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table income
         *
         * @mbg.generated
         */
        void example(com.loa.system.oasystem.entity.income.GenIncomeExample example);
    }
}