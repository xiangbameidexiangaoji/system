package com.loa.system.oasystem.entity.employee;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class GenEmployeeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table employee
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table employee
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table employee
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public GenEmployeeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public GenEmployeeExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public GenEmployeeExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GenEmployeeExample example = new GenEmployeeExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public GenEmployeeExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table employee
     *
     * @mbg.generated
     */
    public GenEmployeeExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table employee
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andEmpidIsNull() {
            addCriterion("empid is null");
            return (Criteria) this;
        }

        public Criteria andEmpidIsNotNull() {
            addCriterion("empid is not null");
            return (Criteria) this;
        }

        public Criteria andEmpidEqualTo(Short value) {
            addCriterion("empid =", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidNotEqualTo(Short value) {
            addCriterion("empid <>", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidGreaterThan(Short value) {
            addCriterion("empid >", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidGreaterThanOrEqualTo(Short value) {
            addCriterion("empid >=", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidLessThan(Short value) {
            addCriterion("empid <", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidLessThanOrEqualTo(Short value) {
            addCriterion("empid <=", value, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("empid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmpidIn(List<Short> values) {
            addCriterion("empid in", values, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidNotIn(List<Short> values) {
            addCriterion("empid not in", values, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidBetween(Short value1, Short value2) {
            addCriterion("empid between", value1, value2, "empid");
            return (Criteria) this;
        }

        public Criteria andEmpidNotBetween(Short value1, Short value2) {
            addCriterion("empid not between", value1, value2, "empid");
            return (Criteria) this;
        }

        public Criteria andEnameIsNull() {
            addCriterion("ename is null");
            return (Criteria) this;
        }

        public Criteria andEnameIsNotNull() {
            addCriterion("ename is not null");
            return (Criteria) this;
        }

        public Criteria andEnameEqualTo(String value) {
            addCriterion("ename =", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualTo(String value) {
            addCriterion("ename <>", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThan(String value) {
            addCriterion("ename >", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualTo(String value) {
            addCriterion("ename >=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThan(String value) {
            addCriterion("ename <", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualTo(String value) {
            addCriterion("ename <=", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("ename <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnameLike(String value) {
            addCriterion("ename like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotLike(String value) {
            addCriterion("ename not like", value, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameIn(List<String> values) {
            addCriterion("ename in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotIn(List<String> values) {
            addCriterion("ename not in", values, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameBetween(String value1, String value2) {
            addCriterion("ename between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andEnameNotBetween(String value1, String value2) {
            addCriterion("ename not between", value1, value2, "ename");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNull() {
            addCriterion("`password` is null");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNotNull() {
            addCriterion("`password` is not null");
            return (Criteria) this;
        }

        public Criteria andPasswordEqualTo(String value) {
            addCriterion("`password` =", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordNotEqualTo(String value) {
            addCriterion("`password` <>", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThan(String value) {
            addCriterion("`password` >", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanOrEqualTo(String value) {
            addCriterion("`password` >=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordLessThan(String value) {
            addCriterion("`password` <", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanOrEqualTo(String value) {
            addCriterion("`password` <=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("`password` <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPasswordLike(String value) {
            addCriterion("`password` like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotLike(String value) {
            addCriterion("`password` not like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordIn(List<String> values) {
            addCriterion("`password` in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotIn(List<String> values) {
            addCriterion("`password` not in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordBetween(String value1, String value2) {
            addCriterion("`password` between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotBetween(String value1, String value2) {
            addCriterion("`password` not between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andDeptnoIsNull() {
            addCriterion("deptno is null");
            return (Criteria) this;
        }

        public Criteria andDeptnoIsNotNull() {
            addCriterion("deptno is not null");
            return (Criteria) this;
        }

        public Criteria andDeptnoEqualTo(Short value) {
            addCriterion("deptno =", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoNotEqualTo(Short value) {
            addCriterion("deptno <>", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoGreaterThan(Short value) {
            addCriterion("deptno >", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoGreaterThanOrEqualTo(Short value) {
            addCriterion("deptno >=", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoLessThan(Short value) {
            addCriterion("deptno <", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoLessThanOrEqualTo(Short value) {
            addCriterion("deptno <=", value, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("deptno <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeptnoIn(List<Short> values) {
            addCriterion("deptno in", values, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoNotIn(List<Short> values) {
            addCriterion("deptno not in", values, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoBetween(Short value1, Short value2) {
            addCriterion("deptno between", value1, value2, "deptno");
            return (Criteria) this;
        }

        public Criteria andDeptnoNotBetween(Short value1, Short value2) {
            addCriterion("deptno not between", value1, value2, "deptno");
            return (Criteria) this;
        }

        public Criteria andPosidIsNull() {
            addCriterion("posid is null");
            return (Criteria) this;
        }

        public Criteria andPosidIsNotNull() {
            addCriterion("posid is not null");
            return (Criteria) this;
        }

        public Criteria andPosidEqualTo(Short value) {
            addCriterion("posid =", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidNotEqualTo(Short value) {
            addCriterion("posid <>", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidGreaterThan(Short value) {
            addCriterion("posid >", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidGreaterThanOrEqualTo(Short value) {
            addCriterion("posid >=", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidLessThan(Short value) {
            addCriterion("posid <", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidLessThanOrEqualTo(Short value) {
            addCriterion("posid <=", value, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("posid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPosidIn(List<Short> values) {
            addCriterion("posid in", values, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidNotIn(List<Short> values) {
            addCriterion("posid not in", values, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidBetween(Short value1, Short value2) {
            addCriterion("posid between", value1, value2, "posid");
            return (Criteria) this;
        }

        public Criteria andPosidNotBetween(Short value1, Short value2) {
            addCriterion("posid not between", value1, value2, "posid");
            return (Criteria) this;
        }

        public Criteria andMgridIsNull() {
            addCriterion("mgrid is null");
            return (Criteria) this;
        }

        public Criteria andMgridIsNotNull() {
            addCriterion("mgrid is not null");
            return (Criteria) this;
        }

        public Criteria andMgridEqualTo(Short value) {
            addCriterion("mgrid =", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridNotEqualTo(Short value) {
            addCriterion("mgrid <>", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridGreaterThan(Short value) {
            addCriterion("mgrid >", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridGreaterThanOrEqualTo(Short value) {
            addCriterion("mgrid >=", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridLessThan(Short value) {
            addCriterion("mgrid <", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridLessThanOrEqualTo(Short value) {
            addCriterion("mgrid <=", value, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("mgrid <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMgridIn(List<Short> values) {
            addCriterion("mgrid in", values, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridNotIn(List<Short> values) {
            addCriterion("mgrid not in", values, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridBetween(Short value1, Short value2) {
            addCriterion("mgrid between", value1, value2, "mgrid");
            return (Criteria) this;
        }

        public Criteria andMgridNotBetween(Short value1, Short value2) {
            addCriterion("mgrid not between", value1, value2, "mgrid");
            return (Criteria) this;
        }

        public Criteria andRealnameIsNull() {
            addCriterion("realname is null");
            return (Criteria) this;
        }

        public Criteria andRealnameIsNotNull() {
            addCriterion("realname is not null");
            return (Criteria) this;
        }

        public Criteria andRealnameEqualTo(String value) {
            addCriterion("realname =", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameNotEqualTo(String value) {
            addCriterion("realname <>", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameGreaterThan(String value) {
            addCriterion("realname >", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameGreaterThanOrEqualTo(String value) {
            addCriterion("realname >=", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameLessThan(String value) {
            addCriterion("realname <", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameLessThanOrEqualTo(String value) {
            addCriterion("realname <=", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("realname <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRealnameLike(String value) {
            addCriterion("realname like", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameNotLike(String value) {
            addCriterion("realname not like", value, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameIn(List<String> values) {
            addCriterion("realname in", values, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameNotIn(List<String> values) {
            addCriterion("realname not in", values, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameBetween(String value1, String value2) {
            addCriterion("realname between", value1, value2, "realname");
            return (Criteria) this;
        }

        public Criteria andRealnameNotBetween(String value1, String value2) {
            addCriterion("realname not between", value1, value2, "realname");
            return (Criteria) this;
        }

        public Criteria andSexIsNull() {
            addCriterion("sex is null");
            return (Criteria) this;
        }

        public Criteria andSexIsNotNull() {
            addCriterion("sex is not null");
            return (Criteria) this;
        }

        public Criteria andSexEqualTo(String value) {
            addCriterion("sex =", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexNotEqualTo(String value) {
            addCriterion("sex <>", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexGreaterThan(String value) {
            addCriterion("sex >", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexGreaterThanOrEqualTo(String value) {
            addCriterion("sex >=", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLessThan(String value) {
            addCriterion("sex <", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLessThanOrEqualTo(String value) {
            addCriterion("sex <=", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("sex <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSexLike(String value) {
            addCriterion("sex like", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotLike(String value) {
            addCriterion("sex not like", value, "sex");
            return (Criteria) this;
        }

        public Criteria andSexIn(List<String> values) {
            addCriterion("sex in", values, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotIn(List<String> values) {
            addCriterion("sex not in", values, "sex");
            return (Criteria) this;
        }

        public Criteria andSexBetween(String value1, String value2) {
            addCriterion("sex between", value1, value2, "sex");
            return (Criteria) this;
        }

        public Criteria andSexNotBetween(String value1, String value2) {
            addCriterion("sex not between", value1, value2, "sex");
            return (Criteria) this;
        }

        public Criteria andBirthdateIsNull() {
            addCriterion("birthdate is null");
            return (Criteria) this;
        }

        public Criteria andBirthdateIsNotNull() {
            addCriterion("birthdate is not null");
            return (Criteria) this;
        }

        public Criteria andBirthdateEqualTo(LocalDateTime value) {
            addCriterion("birthdate =", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateNotEqualTo(LocalDateTime value) {
            addCriterion("birthdate <>", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateGreaterThan(LocalDateTime value) {
            addCriterion("birthdate >", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("birthdate >=", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateLessThan(LocalDateTime value) {
            addCriterion("birthdate <", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("birthdate <=", value, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("birthdate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBirthdateIn(List<LocalDateTime> values) {
            addCriterion("birthdate in", values, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateNotIn(List<LocalDateTime> values) {
            addCriterion("birthdate not in", values, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("birthdate between", value1, value2, "birthdate");
            return (Criteria) this;
        }

        public Criteria andBirthdateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("birthdate not between", value1, value2, "birthdate");
            return (Criteria) this;
        }

        public Criteria andHiredateIsNull() {
            addCriterion("hiredate is null");
            return (Criteria) this;
        }

        public Criteria andHiredateIsNotNull() {
            addCriterion("hiredate is not null");
            return (Criteria) this;
        }

        public Criteria andHiredateEqualTo(LocalDateTime value) {
            addCriterion("hiredate =", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateNotEqualTo(LocalDateTime value) {
            addCriterion("hiredate <>", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateGreaterThan(LocalDateTime value) {
            addCriterion("hiredate >", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("hiredate >=", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateLessThan(LocalDateTime value) {
            addCriterion("hiredate <", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("hiredate <=", value, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("hiredate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHiredateIn(List<LocalDateTime> values) {
            addCriterion("hiredate in", values, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateNotIn(List<LocalDateTime> values) {
            addCriterion("hiredate not in", values, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("hiredate between", value1, value2, "hiredate");
            return (Criteria) this;
        }

        public Criteria andHiredateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("hiredate not between", value1, value2, "hiredate");
            return (Criteria) this;
        }

        public Criteria andLeavedateIsNull() {
            addCriterion("leavedate is null");
            return (Criteria) this;
        }

        public Criteria andLeavedateIsNotNull() {
            addCriterion("leavedate is not null");
            return (Criteria) this;
        }

        public Criteria andLeavedateEqualTo(LocalDateTime value) {
            addCriterion("leavedate =", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateNotEqualTo(LocalDateTime value) {
            addCriterion("leavedate <>", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateGreaterThan(LocalDateTime value) {
            addCriterion("leavedate >", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("leavedate >=", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateLessThan(LocalDateTime value) {
            addCriterion("leavedate <", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("leavedate <=", value, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("leavedate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLeavedateIn(List<LocalDateTime> values) {
            addCriterion("leavedate in", values, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateNotIn(List<LocalDateTime> values) {
            addCriterion("leavedate not in", values, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("leavedate between", value1, value2, "leavedate");
            return (Criteria) this;
        }

        public Criteria andLeavedateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("leavedate not between", value1, value2, "leavedate");
            return (Criteria) this;
        }

        public Criteria andOndutyIsNull() {
            addCriterion("onduty is null");
            return (Criteria) this;
        }

        public Criteria andOndutyIsNotNull() {
            addCriterion("onduty is not null");
            return (Criteria) this;
        }

        public Criteria andOndutyEqualTo(Short value) {
            addCriterion("onduty =", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyNotEqualTo(Short value) {
            addCriterion("onduty <>", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyGreaterThan(Short value) {
            addCriterion("onduty >", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyGreaterThanOrEqualTo(Short value) {
            addCriterion("onduty >=", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyLessThan(Short value) {
            addCriterion("onduty <", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyLessThanOrEqualTo(Short value) {
            addCriterion("onduty <=", value, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("onduty <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOndutyIn(List<Short> values) {
            addCriterion("onduty in", values, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyNotIn(List<Short> values) {
            addCriterion("onduty not in", values, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyBetween(Short value1, Short value2) {
            addCriterion("onduty between", value1, value2, "onduty");
            return (Criteria) this;
        }

        public Criteria andOndutyNotBetween(Short value1, Short value2) {
            addCriterion("onduty not between", value1, value2, "onduty");
            return (Criteria) this;
        }

        public Criteria andEmptypeIsNull() {
            addCriterion("emptype is null");
            return (Criteria) this;
        }

        public Criteria andEmptypeIsNotNull() {
            addCriterion("emptype is not null");
            return (Criteria) this;
        }

        public Criteria andEmptypeEqualTo(Short value) {
            addCriterion("emptype =", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeNotEqualTo(Short value) {
            addCriterion("emptype <>", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeGreaterThan(Short value) {
            addCriterion("emptype >", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeGreaterThanOrEqualTo(Short value) {
            addCriterion("emptype >=", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeLessThan(Short value) {
            addCriterion("emptype <", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeLessThanOrEqualTo(Short value) {
            addCriterion("emptype <=", value, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emptype <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmptypeIn(List<Short> values) {
            addCriterion("emptype in", values, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeNotIn(List<Short> values) {
            addCriterion("emptype not in", values, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeBetween(Short value1, Short value2) {
            addCriterion("emptype between", value1, value2, "emptype");
            return (Criteria) this;
        }

        public Criteria andEmptypeNotBetween(Short value1, Short value2) {
            addCriterion("emptype not between", value1, value2, "emptype");
            return (Criteria) this;
        }

        public Criteria andPhoneIsNull() {
            addCriterion("phone is null");
            return (Criteria) this;
        }

        public Criteria andPhoneIsNotNull() {
            addCriterion("phone is not null");
            return (Criteria) this;
        }

        public Criteria andPhoneEqualTo(String value) {
            addCriterion("phone =", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneNotEqualTo(String value) {
            addCriterion("phone <>", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThan(String value) {
            addCriterion("phone >", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThanOrEqualTo(String value) {
            addCriterion("phone >=", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLessThan(String value) {
            addCriterion("phone <", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLessThanOrEqualTo(String value) {
            addCriterion("phone <=", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("phone <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPhoneLike(String value) {
            addCriterion("phone like", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotLike(String value) {
            addCriterion("phone not like", value, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneIn(List<String> values) {
            addCriterion("phone in", values, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotIn(List<String> values) {
            addCriterion("phone not in", values, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneBetween(String value1, String value2) {
            addCriterion("phone between", value1, value2, "phone");
            return (Criteria) this;
        }

        public Criteria andPhoneNotBetween(String value1, String value2) {
            addCriterion("phone not between", value1, value2, "phone");
            return (Criteria) this;
        }

        public Criteria andQqIsNull() {
            addCriterion("qq is null");
            return (Criteria) this;
        }

        public Criteria andQqIsNotNull() {
            addCriterion("qq is not null");
            return (Criteria) this;
        }

        public Criteria andQqEqualTo(String value) {
            addCriterion("qq =", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqNotEqualTo(String value) {
            addCriterion("qq <>", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqGreaterThan(String value) {
            addCriterion("qq >", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqGreaterThanOrEqualTo(String value) {
            addCriterion("qq >=", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqLessThan(String value) {
            addCriterion("qq <", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqLessThanOrEqualTo(String value) {
            addCriterion("qq <=", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("qq <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andQqLike(String value) {
            addCriterion("qq like", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqNotLike(String value) {
            addCriterion("qq not like", value, "qq");
            return (Criteria) this;
        }

        public Criteria andQqIn(List<String> values) {
            addCriterion("qq in", values, "qq");
            return (Criteria) this;
        }

        public Criteria andQqNotIn(List<String> values) {
            addCriterion("qq not in", values, "qq");
            return (Criteria) this;
        }

        public Criteria andQqBetween(String value1, String value2) {
            addCriterion("qq between", value1, value2, "qq");
            return (Criteria) this;
        }

        public Criteria andQqNotBetween(String value1, String value2) {
            addCriterion("qq not between", value1, value2, "qq");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonIsNull() {
            addCriterion("emercontactperson is null");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonIsNotNull() {
            addCriterion("emercontactperson is not null");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonEqualTo(String value) {
            addCriterion("emercontactperson =", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonNotEqualTo(String value) {
            addCriterion("emercontactperson <>", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonGreaterThan(String value) {
            addCriterion("emercontactperson >", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonGreaterThanOrEqualTo(String value) {
            addCriterion("emercontactperson >=", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonLessThan(String value) {
            addCriterion("emercontactperson <", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonLessThanOrEqualTo(String value) {
            addCriterion("emercontactperson <=", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("emercontactperson <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonLike(String value) {
            addCriterion("emercontactperson like", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonNotLike(String value) {
            addCriterion("emercontactperson not like", value, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonIn(List<String> values) {
            addCriterion("emercontactperson in", values, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonNotIn(List<String> values) {
            addCriterion("emercontactperson not in", values, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonBetween(String value1, String value2) {
            addCriterion("emercontactperson between", value1, value2, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andEmercontactpersonNotBetween(String value1, String value2) {
            addCriterion("emercontactperson not between", value1, value2, "emercontactperson");
            return (Criteria) this;
        }

        public Criteria andIdcardIsNull() {
            addCriterion("idcard is null");
            return (Criteria) this;
        }

        public Criteria andIdcardIsNotNull() {
            addCriterion("idcard is not null");
            return (Criteria) this;
        }

        public Criteria andIdcardEqualTo(String value) {
            addCriterion("idcard =", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardNotEqualTo(String value) {
            addCriterion("idcard <>", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThan(String value) {
            addCriterion("idcard >", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThanOrEqualTo(String value) {
            addCriterion("idcard >=", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLessThan(String value) {
            addCriterion("idcard <", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLessThanOrEqualTo(String value) {
            addCriterion("idcard <=", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("idcard <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdcardLike(String value) {
            addCriterion("idcard like", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotLike(String value) {
            addCriterion("idcard not like", value, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardIn(List<String> values) {
            addCriterion("idcard in", values, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotIn(List<String> values) {
            addCriterion("idcard not in", values, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardBetween(String value1, String value2) {
            addCriterion("idcard between", value1, value2, "idcard");
            return (Criteria) this;
        }

        public Criteria andIdcardNotBetween(String value1, String value2) {
            addCriterion("idcard not between", value1, value2, "idcard");
            return (Criteria) this;
        }

        public Criteria andDelIsNull() {
            addCriterion("del is null");
            return (Criteria) this;
        }

        public Criteria andDelIsNotNull() {
            addCriterion("del is not null");
            return (Criteria) this;
        }

        public Criteria andDelEqualTo(Short value) {
            addCriterion("del =", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelNotEqualTo(Short value) {
            addCriterion("del <>", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThan(Short value) {
            addCriterion("del >", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualTo(Short value) {
            addCriterion("del >=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelGreaterThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThan(Short value) {
            addCriterion("del <", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualTo(Short value) {
            addCriterion("del <=", value, "del");
            return (Criteria) this;
        }

        public Criteria andDelLessThanOrEqualToColumn(GenEmployee.Column column) {
            addCriterion(new StringBuilder("del <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDelIn(List<Short> values) {
            addCriterion("del in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotIn(List<Short> values) {
            addCriterion("del not in", values, "del");
            return (Criteria) this;
        }

        public Criteria andDelBetween(Short value1, Short value2) {
            addCriterion("del between", value1, value2, "del");
            return (Criteria) this;
        }

        public Criteria andDelNotBetween(Short value1, Short value2) {
            addCriterion("del not between", value1, value2, "del");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table employee
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table employee
         *
         * @mbg.generated
         */
        private GenEmployeeExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        protected Criteria(GenEmployeeExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        public GenEmployeeExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        public Criteria andLogicalDeleted(boolean deleted) {
            return deleted ? andDelEqualTo(GenEmployee.Del.IS_DELETED.value()) : andDelNotEqualTo(GenEmployee.Del.IS_DELETED.value());
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table employee
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table employee
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table employee
         *
         * @mbg.generated
         */
        void example(com.loa.system.oasystem.entity.employee.GenEmployeeExample example);
    }
}